//Core
function JR() { this.__VERSION__ = '3.1'; this.__WORKPATH__ = ''; this.__Extend_PROTOTYPE__ = true } JR.prototype = { __init__: function () { if (this.__Extend_PROTOTYPE__) { this.__extendingJsPrototype__() } var f = document.getElementsByTagName('SCRIPT'); var s = f[f.length - 1]; var g = s.src; this.__WORKPATH__ = g.replace(/(\/)[^/]+$/, '$1'); if (!document.getElementsByClassName) { document.getElementsByClassName = function (a, b) { if (b && !b.nodeName) { b = document.getElementById(b) } var c = (b || document).getElementsByTagName('*'); var d = new RegExp('\\s' + a + '\\s'); var e = []; for (var i = 0, j; j = c[i]; i++) { if (d.test(' ' + j.className + ' ')) e.push(j) } return e } } if (typeof (HTMLElement) != "undefined") { HTMLElement.prototype.contains = function (a) { while (a != null && typeof (a.tagName) != "undefind") { if (a == this) return true; a = a.parentNode } return false } } if (!window.toJson) { window.toJson = function (s) { if (!s) return null; if (window.JSON) { try { return JSON.parse(s) } catch (ex) { } } return eval('(' + s + ')') } } }, __extendingJsPrototype__: function () { String.prototype.len = function (a) { return this.replace(a ? /[\u0391-\uFFE5]/g : /[^x00-xff]/g, "00").length }; Date.prototype.format = function (a) { var o = { "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, "H+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() }; var b = { "0": "/u65e5", "1": "/u4e00", "2": "/u4e8c", "3": "/u4e09", "4": "/u56db", "5": "/u4e94", "6": "/u516d" }; if (/(y+)/.test(a)) { a = a.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)) } if (/(E+)/.test(a)) { a = a.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + b[this.getDay() + ""]) } for (var k in o) { if (new RegExp("(" + k + ")").test(a)) { a = a.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))) } } return a } }, extend: function (a) { if (a && a instanceof Object) { for (var b in a) { if (this[b] == undefined) { this[b] = a[b] } } } }, dom: { fitHeight: function (e, a) { var b = e.parentNode; var c = e.nextSibling; var d = /;(\s*)height:(.+);/ig; var f = (b == document.body ? Math.max(document.body.clientHeight, document.documentElement.clientHeight) : b.offsetHeight) - e.offsetTop; while (c) { if (c.nodeName[0] != '#') { f -= c.offsetHeight } c = c.nextSibling } f -= a || 0; if (d.test(e.style.cssText)) { e.style.cssText = e.style.cssText.replace(d, '; height:' + f + 'px;') } else { e.style.cssText += 'height:' + f + 'px;' } }, $: function (a, b, c) { var e = a.nodeName ? a : document.getElementById(a || ''); if (!e) throw a.nodeName ? 'object refrence null' : 'element ' + a + ' not exits!'; if (!b) return e; e = e.getElementsByTagName(b); if (!c) return e; var d = []; var f; for (var i = 0; i < e.length; i++) { var g = true; for (var j in c) { switch (j) { case "className": f = e[i].getAttribute("class") ? "class" : "className"; break; default: f = j; break } if (e[i].getAttribute(f) != c[j]) g = false; if (g) d.push(e[i]) } } return d }, getsByClass: function (a, b) { a = a || document; return a.getElementsByClassName ? a.getElementsByClassName(b) : document.getElementsByClassName(b, a) } }, $: function (a, b, c) { return this.dom.$(a, b, c) }, each: function (a, b) { if (a) { for (var i = 0; i < a.length; i++) b(i, a[i]) } }, style: function (a, b) { var e = this.dom.$(a); if (!e) return null; if (b) { if (b instanceof Object) { for (var s in b) { var c = s.split("-"); for (var i = 1; i < c.length; i++) { c[i] = c[i].replace(c[i].charAt(0), c[i].charAt(0).toUpperCase()) } var d = c.join(''); e.style[d] = b[s] } } else if (b instanceof String) { e.style.cssText = b } } return e.currentStyle || document.defaultView.getComputedStyle(e, null) }, request: function (a, b) { var c = new RegExp('(\\?|&)' + a + '=([^&]+)&*').exec(b ? b : location.href); return c ? c[2] : '' }, supportHTML5: navigator.geolocation != null, template: function (a, b) { if (b instanceof Object) { var c = new RegExp(); for (var n in b) { c.compile('%' + n + '%|\{' + n + '\}', 'g'); a = a.replace(c, b[n]) } } return a }, screen: { width: function () { return Math.max(document.body.clientWidth, document.documentElement.clientWidth) }, height: function () { return Math.max(document.body.clientHeight, document.documentElement.clientHeight) }, offsetWidth: function () { return Math.max(document.body.offsetWidth, document.documentElement.offsetWidth) }, offsetHeight: function () { return Math.max(document.body.offsetHeight, document.documentElement.offsetHeight) } }, event: { add: function (a, c, d, b) { if (!a.attachEvent && !a.addEventListener) { alert('event error! parameter:' + ele + ',event:' + c); return } document.attachEvent ? a.attachEvent('on' + c, d) : a.addEventListener(c, d, b) }, remove: function (a, c, d, b) { document.detachEvent ? a.detachEvent('on' + c, d) : a.removeEventListener(c, d, b) }, src: function (a) { var e = a ? a : window.event; return e.target || e.srcElement }, stopBubble: function (a) { var e = a ? a : window.event; if (window.event) { e.cancelBubble = true } else { e.stopPropagation() } }, preventDefault: function (a) { if (window.event) { window.event.returnvalue = false; return false } else { a.preventDefault(); return false } } }, xhr: { max_request: 2, filter: function (a, b) { return true }, http_stack: null, proc_stack: [], init: function () { if (this.http_stack) return; this.http_stack = []; for (var i = 0; i < this.max_request; i++) { this.http_stack[i] = { state: 0, http: window.XMLHttpRequest ? new XMLHttpRequest() : (new ActiveXObject("MSXML2.XMLHTTP") || new ActiveXObject("MICROSOFT.XMLHTTP")) } } }, request: function (d, e) { this.init(); var f = (d.method || "GET").toUpperCase(); if (this.filter && !this.filter(0, f)) { return false } var g = { uri: d.uri || location.href, params: d.params, method: f, async: d.async === false ? false : d.async || true, data: (d.data || 'text').toLowerCase(), random: d.random === false ? false : d.random || true, call: e }; if (d.params instanceof Object) { var h = 0; g.params = ''; for (var i in d.params) { if (h++ !== 0) { g.params += '&' } g.params += i + '=' + encodeURIComponent(d.params[i]) } } if (g.method != "POST" && g.random) { if (g.uri.indexOf('#') == -1) { if (g.uri.indexOf("?") == -1) g.uri += "?t=" + Math.random(); else g.uri += "&t=" + Math.random() } } var j = function (a, b, c) { a.state = 1; a.http.open(c.method, c.uri, c.async); a.http.onreadystatechange = function () { if (a.http.readyState === 4) { if (a.http.status === 200) { a.state = 0; b.proc_stack.pop(); if (b.filter && !b.filter(1, c.method, a.http.responseText)) { return false } if (c.call.success) { c.call.success(c.data === "text" ? a.http.responseText : (c.data === 'json' ? window.toJson(a.http.responseText) : a.http.responseXML)) } } else if (c.call.error) { a.state = 0; b.proc_stack.pop(); if (b.filter && !b.filter(2, c.method, a.http.responseText)) { return false } c.call.error(a.http.responseText) } } return true }; if (c.method === "POST") a.http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); a.http.send(c.params) }; (function (t, a) { var b = setInterval(function () { if (t.proc_stack.length < t.max_request) { t.proc_stack.push(0); for (var i = 0; i < t.max_request; i++) { if (t.http_stack[i].state === 0) { j(t.http_stack[i], t, a); break } } clearInterval(b) } }, 20) }(this, g)) }, get: function (a, b, c) { this.request(a instanceof Object ? a : { uri: a }, { success: function (x) { if (b) b(x) }, error: function (x) { if (c) c(x) } }) }, post: function (a, b, c, d) { this.request({ uri: a, method: 'POST', params: b }, { success: function (x) { if (c) c(x) }, error: function (x) { if (d) d(x) } }) }, jsonPost: function (b, c, d, e) { b += ((b || location.href).indexOf('?') == -1 ? '?' : '&') + 'json=1'; this.request({ uri: b, params: c, method: 'POST', data: 'json' }, { success: function (a) { if (d) d(a) }, error: function (a) { if (e) e(a) } }) } }, cookie: { write: function (a, b, c) { var d = ""; if (c) { d = new Date((new Date()).getTime() + c); d = "; expires=" + d.toGMTString() } document.cookie = a + "=" + escape(b) + d }, remove: function (a) { this.write(a, "", -9) }, read: function (a) { var b = ""; var c = a + "="; if (document.cookie.length > 0) { var d = document.cookie.indexOf(c); if (d !== -1) { d += c.length; var e = document.cookie.indexOf(";", d); if (e === -1) e = document.cookie.length; b = unescape(document.cookie.substring(d, e)) } } return b } }, getPosition: function (e) { return (e.nodeName ? e : this.$(e)).getBoundingClientRect() }, loadHTML: function (a, b) { var c = /<body[^>]*>([\s\S]+)<\/body>/im; var d = /<script((.|\n)*?)>([\s\S]*?)<\/script>/gim; var f = b.match(c); if (f == null) { f = ['', b] } if (!a.nodeName) a = this.dom.$(a); if (a) { try { a.innerHTML = f[1].replace(d, '').replace(/<style([^>]+)>/ig, '<span style="display:none" class=\"forie\">_</span><style$1>'); this.each(a.getElementsByClassName ? a.getElementsByClassName('forie') : document.getElementsByClassName('forie', a), function (i, e) { a.removeChild(e) }); if (window.navigator.userAgent.indexOf('Chrome') != -1) { this.each(a.getElementsByTagName('STYLE'), function (i, e) { a.removeChild(e); document.getElementsByTagName('HEAD')[0].appendChild(e) }) } } catch (ex) { if (window.console) { console.log(ex.message) } } } var g = /^[\n\s]+$/g; var h = /type=["']*text\/javascript["']*/i; var j; d.lastIndex = 0; while ((j = d.exec(b)) != null) { if (j[1].indexOf(' type=') == -1 || h.test(j[1])) { if (!g.test(j[3])) { this.eval(j[3]) } } } }, load: function (c, d, e, f) { (function (b) { b.xhr.get(d, function (a) { b.loadHTML(c, a); if (e) { e(a) } }, f) }(this)) }, ld: function (c, d) { (function (j, b) { j.xhr.get({ uri: b + c + '.js', async: false, random: false }, function (a) { j.eval(a) }) }(this, d || this.__WORKPATH__)) }, toJson: function (a) { return window.toJson(a) }, eval: function (a) { if (!a) return a; if (window.execScript) { window.execScript(a) } else { var b = document.createElement('SCRIPT'); b.setAttribute('type', 'text/javascript'); b.text = a; document.head.appendChild(b); document.head.removeChild(b) } return a } }; JR.plugin = JR.extend; JR.prototype.ie6 = function () { return /MSIE\s*6\.0/.test(window.navigator.userAgent) }; JR.prototype.path = function () { var d = document.domain, uri = location.href; d = uri.substring(uri.indexOf(d) + d.length); return d.substring(d.indexOf("/")) }; JR.prototype.val = function (a, b) { if (!b) return document.getElementById(a).value; else document.getElementById(a).value = b }; JR.prototype.lazyRun = function (a, b) { if (a) { setTimeout(a, b || 120) } }; JR.prototype.hover = function (e, a, b) { if (!e.nodeName) e = this.$(e); var c = this.ie6(); this.event.add(e, 'mouseover', (function (t) { return function () { if (c) t.className += ' hover'; if (a) a(t) } })(e)); this.event.add(e, 'mouseout', (function (t) { return function () { if (c) t.className = t.className.replace(' hover', ''); if (b) b(t) } })(e)) }; JR.prototype.ldScript = function (a, b, c) { var d = null; var e = document.documentElement.getElementsByTagName("HEAD"); if (e.length != 0) d = e[0]; else d = document.body; var f = d.getElementsByTagName('SCRIPT'); var g = false; for (var i = 0; i < f.length; i++) { if (f[i].getAttribute('src') && f[i].getAttribute('src').toLowerCase() == a.toLowerCase()) { g = true } } if (!g) { var h = document.createElement('SCRIPT'); if (b) h.onreadystatechange = h.onload = b; if (c) h.onerror = c; h.setAttribute('type', 'text/javascript'); h.setAttribute('src', a); d.appendChild(h) } }; JR.prototype._width = function (e, a) { e = this.$(e); var s = this.style(e); if (s["display"] != 'none') { return a ? e.clientWidth : e.offsetWidth } var b = {}; for (var i in s) { b[i] = s[i] } this.style(e, { position: 'absolute', visibility: 'hidden', display: 'block' }); var w = a ? e.clientWidth : e.offsetWidth; this.style(e, b); this.style(e, { display: 'none' }); return w }; JR.prototype._height = function (e, a) { e = this.$(e); var s = this.style(e); if (s["display"] != 'none') { return a ? e.clientHeight : e.offsetHeight } var b = {}; for (var i in s) { b[i] = s[i] } this.style(e, { position: 'absolute', visibility: 'hidden', display: 'block' }); var h = a ? e.clientHeight : e.offsetHeight; b.display = 'none'; this.style(e, b); this.style(e, { display: 'none' }); return h }; JR.prototype.width = function (e) { return this._width(e) }; JR.prototype.height = function (e) { return this._height(e) }; JR.prototype.clientWidth = function (e) { return this._width(e, true) }; JR.prototype.clientHeight = function (e) { return this._height(e, true) }; window.jr = new JR(); window.jr.__init__();window.jr = window.jr;
jr.extend({ json: { prefix: 'field', _objReg: /(.+)\[([^\]]+)\]/, _dtReg: /^(\d{4}((\/|-)\d{2}){2})T(\d{2}(:\d{2}){2})((\.\d+)*)$/i, _each: function (a, b) { for (var i = 0; i < a.length; i++) { if (b) b(i, a[i]) } }, _getFields: function (b) { var c = this.prefix; var d = {}; var f; var g, subProName, proValue; if (!b.nodeName) b = document.getElementById(b); var h = this._objReg; this._each(b.getElementsByTagName('*'), function (i, e) { if (e.nodeName != '#text' && e.nodeName != '#comment') { g = e.getAttribute(c); if (g) { if (h.test(g)) { var a = h.exec(g); g = a[1]; subProName = a[2]; if (d[g] == null) { d[g] = {} } d[g][subProName] = e } else { d[g] = e } if (!e.name) e.setAttribute('name', c + '_' + g) } } }); return d }, _bindField: function (a, b) { if (this._dtReg.test(b)) { var c = this._dtReg.exec(b); if (c[4] == '00:00:00') { b = b.replace(this._dtReg, '$1') } else { b = b.replace(this._dtReg, '$1 $4') } } switch (a.nodeName) { case 'TEXTAREA': case 'INPUT': switch (a.type) { default: a.value = b; break; case "radio": var d = document.getElementsByName(a.name); for (var i = 0; i < d.length; i++) { if (d[i].value == b) { d[i].setAttribute('checked', 'checked'); break } } break; case 'checkbox': var e = false; if ((b == true && b.toString() != '1') || b == a.value) { e = true } else if (b.length) { for (var i in b) { if (b[i] == a.value) { e = true; break } } } if (e) { a.setAttribute('checked', 'checked') } else { a.removeAttribute('checked') } break } break; case 'IMG': a.src = b; break; case 'SELECT': a.value = b; break; default: a.innerHTML = b; break } }, _getFieldVal: function (a) { var b = ''; switch (a.nodeName) { case 'TEXTAREA': case 'INPUT': switch (a.type) { default: b = a.value; break; case 'radio': var c = document.getElementsByName(a.name); for (var i = 0; i < c.length; i++) { if (c[i].checked) { b = c[i].value; break } } break; case 'checkbox': b = a.checked ? a.value : ''; break } break; case 'IMG': b = a.src; break; case 'SELECT': b = a.selectedIndex == -1 ? '' : a.options[a.selectedIndex].value; break; default: b = a.innerHTML; break } return b }, bind: function (a, b, c) { var d; var e; var f; d = this._getFields(a); for (var g in d) { e = d[g]; if (c && c instanceof Function) { f = c(g, b[g]) } else { f = b[g] } if (f != null) { if (f instanceof Object) { if (f.length) { for (var i in e) { this._bindField(e[i], f) } } else { for (var i in f) { if (e[i]) { this._bindField(e[i], f[i]) } } } continue } this._bindField(e, f) } } }, __convert: function (a, b, c) { var d; var e; var f; var g = {}; var h = ''; d = this._getFields(a); for (var k in d) { e = d[k]; if (e.nodeName) { f = this._getFieldVal(e); if (c && c instanceof Function) { f = c(k, f) } g[k] = f; h += k + '=' + f + '&' } else { g[k] = {}; var j = 0; var l = false; for (var i in e) { if (j++ == 0 && /^\d+$/.test(i)) { g[k] = []; l = true } if (e[i]) { f = this._getFieldVal(e[i]); if (c && c instanceof Function) { f = c(k, f) } if (f && f != '') { if (l) { g[k].push(f) } else { g[k][i] = f } } h += k + '[' + i + ']=' + f + '&' } } } } return b == "object" ? g : h.replace(/&$/g, '') }, toObject: function (a) { return this.__convert(a, 'object') }, toQueryString: function (a) { return this.__convert(a, 'string') }, toString: function (a) { return this.__convert(a, 'string').replace(/&/g, ';').replace(/=/g, ':') }, string: function (o) { var a = this; var b = []; var c = function (s) { if (typeof s == 'object' && s != null) a.string(s); return /^(string|number)$/.test(typeof s) ? "'" + s + "'" : s }; for (var i in o) { if (o.hasOwnProperty(i)) { var d = c(o[i]); if (d.pop) { b.push("'" + i + "':[\'" + escape(d.join('\',\'')) + '\']') } else { b.push("'" + i + "':" + escape(d)) } } } return '{' + escape(b.join(',')) + '}' } } });
window.jr = window.jr;

function HS_DateAdd(a, b, c) { b = parseInt(b); if (typeof (c) == "string") { var c = new Date(c.split("-")[0], c.split("-")[1], c.split("-")[2]) } if (typeof (c) == "object") { var c = c } switch (a) { case "y": return new Date(c.getFullYear() + b, c.getMonth(), c.getDate()); break; case "m": return new Date(c.getFullYear(), c.getMonth() + b, checkDate(c.getFullYear(), c.getMonth() + b, c.getDate())); break; case "d": return new Date(c.getFullYear(), c.getMonth(), c.getDate() + b); break; case "w": return new Date(c.getFullYear(), c.getMonth(), 7 * b + c.getDate()); break } } function checkDate(a, b, c) { var d = ["31", "28", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31"]; var e = ""; if (a % 4 == 0) { d[1] = "29" } if (c > d[b]) { e = d[b] } else { e = c } return e } function WeekDay(a) { var b; if (typeof (a) == "string") { b = new Date(a.split("-")[0], a.split("-")[1], a.split("-")[2]) } if (typeof (a) == "object") { b = a } return b.getDay() } function HS_calender() { var a = ""; var b = ""; b += "<style type='text/css'>"; b += ".calender {width:170px; height:auto; font-size:12px; margin-right:14px; background:#fff; border:1px solid #6699cc; padding:1px}"; b += ".calender ul {list-style-type:none; margin:0; padding:0;}"; b += ".calender .day { background-color:#EDF5FF; height:20px;}"; b += ".calender .day li,.calender .date li{ float:left; width:14%; height:20px; line-height:20px; text-align:center}"; b += ".calender li a { text-decoration:none; font-family:Tahoma; font-size:11px; color:#333}"; b += ".calender li a:hover { color:#f30; text-decoration:underline}"; b += ".calender li a.hasArticle {font-weight:bold; color:#f60 !important}"; b += ".lastMonthDate, .nextMonthDate {color:#bbb;font-size:11px}"; b += ".selectThisYear a, .selectThisMonth a{text-decoration:none; margin:0 2px; color:#000; font-weight:bold}"; b += ".calender .LastMonth, .calender .NextMonth{ text-decoration:none; color:#000; font-size:18px; font-weight:bold; line-height:16px;}"; b += ".calender .LastMonth { float:left;}"; b += ".calender .NextMonth { float:right;}"; b += ".calenderBody {clear:both}"; b += ".calenderTitle {text-align:center;height:20px; line-height:20px; clear:both}"; b += ".today { background-color:#ffffaa;border:1px solid #f60; padding:2px}"; b += ".today a { color:#f30; }"; b += ".calenderBottom {clear:both; border-top:1px solid #ddd; padding: 3px 0; text-align:left}"; b += ".calenderBottom a {text-decoration:none; margin:2px !important; font-weight:bold; color:#000}"; b += ".calenderBottom a.closeCalender{float:right}"; b += ".closeCalenderBox {float:right; border:1px solid #000; background:#fff; font-size:9px; width:11px; height:11px; line-height:11px; text-align:center;overflow:hidden; font-weight:normal !important}"; b += "</style>"; var c; if (typeof (arguments[0]) == "string") { selectDate = arguments[0].split("-"); var d = selectDate[0]; var e = parseInt(selectDate[1]) - 1 + ""; var f = selectDate[2]; c = new Date(d, e, f) } else if (typeof (arguments[0]) == "object") { c = arguments[0] } var g = HS_DateAdd("d", "-1", c.getFullYear() + "-" + c.getMonth() + "-01").getDate(); var h = WeekDay(c.getFullYear() + "-" + c.getMonth() + "-01"); var k = HS_DateAdd("d", "-1", c.getFullYear() + "-" + (parseInt(c.getMonth()) + 1).toString() + "-01"); var l = k.getDate(); var n = k.getDay(); var o = c; today = o.getFullYear() + "-" + o.getMonth() + "-" + o.getDate(); var p = ''; for (i = 0; i < h; i++) { a = "<li class='lastMonthDate'>" + g + "</li>" + a; g-- } for (i = 1; i <= l; i++) { var m = parseInt(c.getMonth()) + 1; var q = c.getFullYear() + "-" + (m > 10 ? m : '0' + m) + "-" + (i < 10 ? '0' + i : i); if (today == c.getFullYear() + "-" + c.getMonth() + "-" + i) { p = c.getFullYear() + "-" + (parseInt(c.getMonth()) + 1).toString() + "-" + i; a += "<li><a href=javascript:void(0) class='today' onclick='_selectThisDay(this)' title='" + q + "'>" + i + "</a></li>" } else { a += "<li><a href=javascript:void(0) onclick='_selectThisDay(this)' title='" + q + "'>" + i + "</a></li>" } } var j = 1; for (i = n; i < 6; i++) { a += "<li class='nextMonthDate'>" + j + "</li>"; j++ } a += b; var r = "<a href='javascript:void(0)' class='NextMonth' onclick=HS_calender(HS_DateAdd('m',1,'" + c.getFullYear() + "-" + c.getMonth() + "-" + c.getDate() + "'),this) title='Next Month'>&raquo;</a>"; r += "<a href='javascript:void(0)' class='LastMonth' onclick=HS_calender(HS_DateAdd('m',-1,'" + c.getFullYear() + "-" + c.getMonth() + "-" + c.getDate() + "'),this) title='Previous Month'>&laquo;</a>"; r += "<span class='selectThisYear'><a href='javascript:void(0)' onclick='CalenderselectYear(this)' title='Click here to select other year' >" + c.getFullYear() + "</a></span>年<span class='selectThisMonth'><a href='javascript:void(0)' onclick='CalenderselectMonth(this)' title='Click here to select other month'>" + (parseInt(c.getMonth()) + 1).toString() + "</a></span>月"; if (arguments.length > 1) { arguments[1].parentNode.parentNode.getElementsByTagName("ul")[1].innerHTML = a; arguments[1].parentNode.innerHTML = r } else { var s = b + "<div class='calender'><div class='calenderTitle'>" + r + "</div><div class='calenderBody'><ul class='day'><li>日</li><li>一</li><li>二</li><li>三</li><li>四</li><li>五</li><li>六</li></ul><ul class='date' id='thisMonthDate'>" + a + "</ul></div><div class='calenderBottom'><a href='javascript:void(0)' class='closeCalender' onclick='closeCalender(this)'>&times;</a><span><span><a href=javascript:void(0) onclick='_selectThisDay(this)' title='" + p + "'>Today</a></span></span></div></div>"; return s } } function _selectThisDay(d) { var a = d.parentNode.parentNode.parentNode.parentNode.parentNode; a.targetObj.value = d.title; a.parentNode.removeChild(a) } function closeCalender(d) { var a = d.parentNode.parentNode.parentNode; a.parentNode.removeChild(a) } function CalenderselectYear(a) { var b = ""; var c = a.innerHTML; for (i = 1970; i <= 2020; i++) { if (i == c) { b += "<option value=" + i + " selected>" + i + "</option>" } else { b += "<option value=" + i + ">" + i + "</option>" } } b = "<select onblur='selectThisYear(this)' onchange='selectThisYear(this)' style='font-size:11px'>" + b + "</select>"; a.parentNode.innerHTML = b } function selectThisYear(a) { HS_calender(a.value + "-" + a.parentNode.parentNode.getElementsByTagName("span")[1].getElementsByTagName("a")[0].innerHTML + "-1", a.parentNode) } function CalenderselectMonth(a) { var b = ""; var c = a.innerHTML; for (i = 1; i <= 12; i++) { if (i == c) { b += "<option value=" + i + " selected>" + i + "</option>" } else { b += "<option value=" + i + ">" + i + "</option>" } } b = "<select onblur='selectThisMonth(this)' onchange='selectThisMonth(this)' style='font-size:11px'>" + b + "</select>"; a.parentNode.innerHTML = b } function selectThisMonth(a) { HS_calender(a.parentNode.parentNode.getElementsByTagName("span")[0].getElementsByTagName("a")[0].innerHTML + "-" + a.value + "-1", a.parentNode) } function setDate(a) { var b = new Date(); if (a.value != '') { b = new Date(a.value) } var c = document.createElement("span"); c.innerHTML = HS_calender(b); c.style.cssText += "position:absolute;z-index:996;"; c.targetObj = a; a.parentNode.insertBefore(c, a.nextSibling) } jr.extend({ calender: function (a) { if (!a.nodeName) a = document.getElementById(a); jr.event.add(a, 'focus', function () { setDate(this) }) }, setDate: function (a) { setDate(a) } });





var DialogText={ALERT_MSG_TPL:'<div class="ui-alert-message">'+'<span class="alert-icon alert-icon-{icon}"></span>{msg}</div>',ALERT_BTN_TPL:'<input type="button" tag="{tag}" value="{text}"/>',ALERT_ALL_TITLE:'提示',ALERT_BTN_OK_TEXT:'确定',ALERT_BTN_CANCEL_TEXT:'取消'};function simpleDialog(dialogOptions){this.window=window;this.opts={_inited:false,id:parseInt(Math.random()*1000+(new Date()).valueOf()%1000),title:'',drag:!false,className:'ui-dialog',setupFade:false,canNotClose:false,onclose:null,cross:!false,textArr:DialogText,};this.eles={panel:null,con:null,box:null,};this.win=window;this.doc=null;for(var i in dialogOptions){if(dialogOptions[i]){this.opts[i]=dialogOptions[i]}}if(this.opts.cross!=false){while(this.win.parent!=this.win){this.win=this.win.parent}}this.doc=this.win.document}simpleDialog.prototype={new:function(node,opt){var e=document.createElement(node);for(i in opt){e.setAttribute(i,opt[i])}return e},_initialize:function(){with(this.opts){if(_inited){return false}var document=this.doc;var absCss='position:fixed;top:0;left:0;bottom:0;right:0;margin:auto';this.eles.panel=this.new('DIV',{id:'panel_'+id,class:className});document.body.appendChild(this.eles.panel);this.eles.panel.appendChild(this.new('DIV',{class:'bg bglayer',style:'z-index:99;'+absCss}));css='z-index:100;'+absCss;this.eles.box=this.new('DIV',{class:'box',style:css});this.eles.panel.appendChild(this.eles.box);if(title){var titHtml='<span class="left corner" style="position:absolute;left:0;top:0">&nbsp;</span><span class="txt">'+title+'</span>';if(!canNotClose){titHtml+='<span class="close" style="position:absolute;right:5px;top:0;text-decoration:none;font-family:Verdana;cursor:pointer" title="关闭窗口"><span>X</span></span>'}titHtml+='<span class="right corner" style="position:absolute;right:0;top:0">&nbsp;</span>';var elem=this.new('DIV',{class:'title',style:'user-select:none;-ms-user-select:none;-moz-user-select:none;-webkit-user-select:none;'});elem.innerHTML=titHtml;this.eles.box.appendChild(elem);elem.getElementsByTagName('SPAN')[2].onclick=(function(d){return function(){d.close()}})(this);this.win['dialog_'+this.id]=this;if(drag){new dragObject(elem,this.win).start(this.eles.box)}}this.eles.con=this.new('DIV',{class:'content con'});this.eles.box.appendChild(this.eles.con);if(title){var be=document.createElement("div");be.className='bottom';be.style.cssText="position:relative;";be.innerHTML='<span class="left corner" style="position:absolute;left:0;">&nbsp;</span><span class="txt">&nbsp;</span><span class="right corner" style="position:absolute;right:0;">&nbsp;</span>';this.eles.box.appendChild(be)}_inited=true}},getPanel:function(){return this.eles.panel},hiddenBox:function(){with(this.eles.box){style.visibility='hidden';style.left='inherit';style.bottom='inherit'}},showBox:function(){with(this.eles.box){style.visibility='';style.width=offsetWidth+'px';style.height=offsetHeight+'px';style.left='0';style.bottom='0'}},getFrameWindow:function(){var frames=this.eles.panel.getElementsByTagName('IFRAME');if(frames.length>0){return frames[0].contentWindow}return null},getTargetWindow:function(){return this.win},open:function(uri, width, height, scroll){this._initialize();this.hiddenBox();var pl=this.eles.con;this.eles.con.innerHTML+="<iframe frameborder='0' scrolling='"+(scroll||'auto')+"' src='"+uri+"' width='"+(width||'100%')+"' style='padding:0' height='"+(height||'100%')+"'></iframe>";pl.style.width=Math.max(pl.scrollWidth,width)+'px';pl.style.height=Math.max(pl.scrollHeight,height)+'px';this.showBox()},write:function(html){this._initialize();this.hiddenBox();var pl=this.eles.con;if(!this.opts.title){pl.innerHTML=html}else{var divs=pl.getElementsByTagName('DIV');for(var i=1;i<divs.length;i++){pl.removeChild(divs[i])}pl.innerHTML+=html}this.showBox()},async:function(uri,method,params,func){this._initialize();this.hiddenBox();var ajax=jr.xhr;var call=(function(d){return function(x){jr.loadHTML(d.eles.con,x);d.showBox();if(func)func(x)}})(this);if(!method||method.toLowerCase()=="get"){ajax.get(uri,call)}else{ajax.post(uri,params,call)}},custom:function(p){var d=this;d.write(jr.template(this.opts.textArr.ALERT_MSG_TPL,{msg:p.message,icon:p.icon}));var buttonsHtml='';for(var i=0; i<p.buttons.length; i++){var e=p.buttons[i];if(e&&e.tag){buttonsHtml+=jr.template(this.opts.textArr.ALERT_BTN_TPL,{tag:e.tag,text:e.text})}}var rd=Math.floor(Math.random()*10000);d.write('<div class="ui-alert-control" id="ui-alert-control-'+rd+'">'+buttonsHtml+'</div>');var pl=d.getTargetWindow().document.getElementById('ui-alert-control-'+rd);var btns=pl.getElementsByTagName('INPUT');for(var i=0; i<btns.length; i++){if(i===0){btns[i].focus()}btns[i].onclick=(function(d, p){return function(){var tag=this.getAttribute('tag');if(p.click&&p.click instanceof Function){if(p.click(tag,d)){d.close()}}else{d.close()}}})(d,p)}return d},closeDialog:function(){this.win.document.body.removeChild(this.eles.panel)},close:function(callback){if(this.opts.onclose!=null&&this.opts.onclose()==false){return false}this.closeDialog();if(callback)callback();try{delete this.win['dialog_'+this.id]}catch(ex){this.win['dialog_'+this.id]=null}this.opts._inited=false}};function dragObject(elem,window){this.elem=elem;this.win=window}dragObject.prototype.regist=function(target,cursor,moveHandler,stopHandler){var o=this.elem;target=target?target:o;var sx,sy;var document=this.win==null?document:this.win.document;o.style.cursor=cursor||"move";var move=moveHandler||function(e){e=e||event;window.getSelection?window.getSelection().removeAllRanges():document.selection.empty();if(e.preventDefault)e.preventDefault();with(target.style){position="absolute";margin='inherit';left=e.clientX-sx+"px";top=e.clientY-sy+"px"}};jr.event.add(o,"mousedown",function(e){e=e||event;if(e.button==1||e.button==0){sx=e.clientX-target.offsetLeft;sy=e.clientY-target.offsetTop;jr.event.add(document,'mousemove',move,false);jr.event.add(document,'mouseup',stopDrag,false)}},false);var stopDrag=function(){jr.event.remove(document,'mousemove',move,false);jr.event.remove(document,'mouseup',stopDrag,false);if(stopHandler&&stopHandler instanceof Function)stopHandler()}};dragObject.prototype.custom=function(obj,cursor,moveHandler,stopHandler){return this.regist(obj,cursor,moveHandler,stopHandler)};dragObject.prototype.start=function(obj){this.regist(obj,null,null,null)};var SimpleDialog={create:function(dialogOpts){return new simpleDialog(dialogOpts)},create2:function(title,usedrag,cross,onclose,style){return new simpleDialog({title:title,drag:usedrag||false,cross:cross||false,style:style,onclose:onclose})},getDialog:function(){var dialog=null;var reg=/^dialog_/i;var targetWin=window;var getFromWin=function(win){var d=null;for(var i in win){if(reg.test(i)&&win[i]!=null){d=win[i];break}}return d};do{dialog=getFromWin(targetWin);if(dialog==null){targetWin=targetWin.parent;dialog=getFromWin(targetWin)}if(dialog){break}}while(targetWin.parent!=targetWin);return dialog},close:function(){var d=this.getDialog();if(d)d.close()},customAlert:function(p){var title=DialogText.ALERT_ALL_TITLE+'-'+(p.title||'');title=title.replace(/^-|-$/g,'');var d=this.create({title:title,drag:p.drag||true,cross:p.cross||true,canClose:false});return d.custom(p)},alert:function(msg,func,icon,text){return this.customAlert({icon:icon,message:msg,buttons:[{tag:'ok',text:text||DialogText.ALERT_BTN_OK_TEXT}],click:function(){if(func instanceof Function)func();return true}})},confirm:function(msg,func,textArr){var okTxt=DialogText.ALERT_BTN_OK_TEXT;var cancelTxt=DialogText.ALERT_BTN_CANCEL_TEXT;if(textArr instanceof Array&&textArr.length===2){okTxt=textArr[0];cancelTxt=textArr[1]}return this.customAlert({icon:'confirm',message:msg,buttons:[{tag:'ok',text:okTxt},{tag:'cancel',text:cancelTxt}],click:function(tag){if(func instanceof Function){func(tag!='cancel')}return true}})}};(function(r,j){var obj={dialog:window.SimpleDialog,drag:function(ele,win){return new drag(ele,win)}};if(r&&j){r(['jr/core'],function(j){return j.extend(obj)})}else{j.extend(obj)}})(window.define1,window.jr);






function datagrid(g, h) { this.panel = g.nodeName ? g : jr.$(g); this.columns = h.columns; this.idField = h.idField || "id"; this.url = h.url; this.data = h.data; this.afterLoad = h.loaded; this.loadbox = null; this.gridView = null; this.loading = function () { if (this.gridView.offsetHeight === 0) { var a = this.gridView.previousSibling.offsetHeight; var b = this.panel.offsetHeight - a; this.gridView.style.cssText = this.gridView.style.cssText.replace(/(\s*)height:[^;]+;/ig, ' height:' + (b > a ? b + 'px;' : 'auto')); var c = Math.ceil((this.gridView.clientWidth - this.loadbox.offsetWidth) / 2); var d = Math.ceil((this.gridView.clientHeight - this.loadbox.offsetHeight) / 2); this.loadbox.style.cssText = this.loadbox.style.cssText.replace(/(;\s*)*left:[^;]+;([\s\S]*)(\s)top:([^;]+)/ig, '$1left:' + c + 'px;$2 top:' + (d < 0 ? -d : d) + 'px') } this.loadbox.style.display = '' }; this.initLayout = function () { var a = ''; if (this.columns && this.columns.length != 0) { a += '<div class="ui-datagrid-header"><table width="100%" cellspacing="0" cellpadding="0"><tr>'; for (var i in this.columns) { a += '<td' + (i == 0 ? ' class="first"' : '') + (this.columns[i].align ? ' align="' + this.columns[i].align + '"' : '') + (this.columns[i].width ? ' width="' + this.columns[i].width + '"' : '') + '><div class="ui-datagrid-header-title">' + this.columns[i].title + '</div></td>' } a += '</tr></table></div>'; a += '<div class="ui-datagrid-msg" style="position: absolute; display: inline-block;min-width:60px;top:0;bottom:0;left:0;right:0;margin:auto;">加载中...</div>' + '<div class="ui-datagrid-view"></div>' } this.panel.innerHTML = a; this.gridView = (this.panel.getElementsByClassName ? this.panel.getElementsByClassName('ui-datagrid-view') : jr.dom.getsByClass(this.panel, 'ui-datagrid-view'))[0]; this.loadbox = this.gridView.previousSibling }; this.fillRows = function (a) { if (!a) return; var b; var c; var d; var e = ''; var f = a['rows'] || a; e += '<table width="100%" cellspacing="0" cellpadding="0">'; for (var i = 0; i < f.length; i++) { b = f[i]; e += '<tr' + (b[this.idField] != null ? ' data-indent="' + b[this.idField] + '"' : '') + '>'; for (var j in this.columns) { c = this.columns[j]; d = b[c.field]; e += '<td' + (j == 0 ? ' class="first"' : '') + (c.align ? ' align="' + c.align + '"' : '') + (i == 0 && c.width ? ' width="' + c.width + '"' : '') + '><div class="field-value">' + (c.formatter && c.formatter instanceof Function ? c.formatter(d, b, i) : d) + '</div></td>' } e += '</tr>' } e += '</table><div style="clear:both"></div>'; this.gridView.innerHTML = e; this.gridView.srcollTop = 0; this.loadbox.style.display = 'none'; if (this.afterLoad && this.afterLoad instanceof Function) this.afterLoad(a) }; this._fixPosition = function () { }; this._load_data = function (b) { if (!this.url) return; var t = this; if (b) { if (!(b instanceof Function)) { b = null } } jr.xhr.request({ uri: this.url, data: 'json', params: this.data, method: 'POST' }, { success: function (a) { t.fillRows(a) }, error: function () { } }) }; this.initLayout(); this.load() } datagrid.prototype.resize = function () { this._fixPosition() }; datagrid.prototype.load = function (a) { this.loading(); if (a && a instanceof Object) { this.fillRows(a); return } this._load_data() }; datagrid.prototype.reload = function (a, b) { if (a) { this.data = a } this.load(b) }; jr.extend({ grid: function (a, b) { return new datagrid(a, b) }, datagrid: function (a, b) { return new datagrid(a, b) } });
jr.extend({ form: { getData: function (a) { var b = ''; var c = document.forms[a || 0]; return jr.json.toQueryString(c) }, asyncSubmit: function (a, b) { var c = document.forms[a || 0]; var d = document.getElementById('$async_ifr'); if (!d) { try { d = document.createElement('<iframe name="$async_ifr">') } catch (ex) { d = document.createElement('iframe'); d.setAttribute('name', '$async_ifr') } d.setAttribute('id', '$async_ifr'); if (!b) { d.style.cssText = 'display:none' } else { d.style.cssText = 'width:600px;height:400px' } document.body.insertBefore(d, document.body.firstChild) } if (c.getAttribute('target') != d.name) { c.setAttribute('target', d.getAttribute('name')) } c.submit() } } });
var JS_scrollbar = { $: window.jr, pnode: null, ele: null, startP: { x: 0, y: 0 }, moveP: { x: 0, y: 0, z: -1 }, slideBar: null, init: function (e) { this.ele = e.nodeName ? e : document.getElementById(e); this.pnode = document.createElement('DIV'); this.slideBar = null; this.timer = null; var a = this.ele.parentNode; a.insertBefore(this.pnode, this.ele); this.pnode.appendChild(this.ele); this.pnode.className = 'scrollbar'; this.pnode.style.cssText += 'height:' + this.ele.clientHeight + 'px;overflow:hidden;position:relative'; this.ele.style.height = 'auto'; this.ele.style.position = 'absolute'; this.showbar(); return this }, showbar: function () { var c = this.pnode.clientHeight / this.ele.scrollHeight; var d = document.createElement('DIV'); var f = 0; d.className = 'bar'; d.style.cssText = 'position:absolute;right:0;top:0;height:' + this.pnode.clientHeight + 'px'; this.pnode.appendChild(d); var g = document.createElement('DIV'); g.className = 'btn'; g.innerHTML = '<div class="top"></div><div class="center"></div><div class="bottom"></div>'; g.style.cssText = 'height:' + Math.round(c * d.clientHeight) + 'px;'; d.appendChild(g); if (this.$.style(g)['backgroundImage'] == 'none' && this.$.style(g)['backgroundColor'] == 'transparent') { g.style.backgroundColor = '#a0a0a0' } if (!/^(?!0)\d+px$/.test(this.$.style(d)['width'])) { d.style.width = '12px'; d.style.backgroundColor = '#f5f5f5' } this.pnode.style.width = (this.ele.offsetWidth + d.offsetWidth) + 'px'; this.sliderBar = g; var t = this; var h; var i = function (a) { t.$.event.remove(document.body, 'mousemove', h) }; this.$.event.add(g, 'mousedown', function () { var e = window.event || arguments[0]; var b = e.clientY - g.offsetTop; h = function () { var a = (window.event || arguments[0]).clientY - b; t.scroll(a); window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty() }; t.$.event.add(document.body, 'mousemove', h) }); document.body.onmouseup = i }, scroll: function (a) { var b = this.sliderBar.parentNode.offsetHeight - this.sliderBar.offsetHeight; if (a < 0) a = 0; if (a > b) a = b; var c = a / b; this.sliderBar.style.marginTop = a + 'px'; this.ele.style.top = -Math.round((this.ele.offsetHeight - this.pnode.offsetHeight) * c + 1) + 'px' } }; jr.extend({ scrollbar: function (e) { return JS_scrollbar.init(e) } }); jr.event.add(window, 'load', function () { jr.each(document.getElementsByClassName('ui-scrollbar'), function (i, e) { JS_scrollbar.init(e) }) });
jr.extend({ table: { dynamic: function (f, g, h) { if (f && f.nodeName === "TABLE") { f.className += ' ui-table'; var j = f.getElementsByTagName('TH'); window.jr.each(j, function (i, e) { if (i != j.length - 1) { if ((e.getElementsByClassName ? e.getElementsByClassName('th-split') : document.getElementsByClassName('th-split', e)).length == 0) { var a = document.createElement("SPAN"); a.className = 'th-split'; e.appendChild(a) } } }); var k = f.getElementsByTagName("tr"); for (var i = 0; i < k.length; i++) { if (i % 2 == 1) if (!k[i].className) k[i].className = 'even'; k[i].onmouseover = function () { if (this.className.indexOf('selected') == -1) { this.className = this.className.indexOf('even') != -1 ? "hover even" : "hover" } }; k[i].onmouseout = function () { if (this.className.indexOf('selected') == -1) { this.className = this.className.indexOf("even") == -1 ? "" : "even" } }; k[i].onclick = (function (b, c, d) { return function () { var a = new Array(); window.jr.each(b, function (i, e) { if (!d) { if (e != c) { e.className = e.className.indexOf("even") == -1 ? "" : "even" } } if (e.className.indexOf('selected') != -1) { a.push(e) } }); if (c.className.indexOf('selected') == -1) { c.className = c.className.indexOf("even") == -1 ? "selected" : "selected even"; a.push(c) } if (h) { h(a) } } })(k, k[i], g) } } } } });
function Node(a, b, c, d, e, f, g, h, i, j) { this.id = a; this.pid = b; this.name = c; this.url = d; this.title = e; this.value = f; this.target = g; this.icon = h; this.iconOpen = i; this._io = j || false; this._is = false; this._ls = false; this._hc = false; this._ai = 0; this._p = 0 } function dTree(a, b) { this.config = { iconPath: b || '', target: null, folderLinks: true, useSelection: true, useCookies: !true, useLines: true, useIcons: true, useStatusText: false, closeSameLevel: false, inOrder: false }; var c = this.config.iconPath; this.icon = { root: c + 'img/base.gif', folder: c + 'img/folder.gif', folderOpen: c + 'img/folderopen.gif', node: c + 'img/page.gif', empty: c + 'img/empty.gif', line: c + 'img/line.gif', join: c + 'img/join.gif', joinBottom: c + 'img/joinbottom.gif', plus: c + 'img/plus.gif', plusBottom: c + 'img/plusbottom.gif', minus: c + 'img/minus.gif', minusBottom: c + 'img/minusbottom.gif', nlPlus: c + 'img/nolines_plus.gif', nlMinus: c + 'img/nolines_minus.gif' }; this.obj = a; this.aNodes = []; this.aIndent = []; this.root = new Node(-1); this.selectedNode = null; this.selectedFound = false; this.completed = false } dTree.prototype.add = function (a, b, c, d, e, f, g, h, i, j) { this.aNodes[this.aNodes.length] = new Node(a, b, c, d, e, f, g, h, i, j) }; dTree.prototype.bind = function (d, f) { this.add(0, -1, '<b class="title">' + d.text + '</b>', d.url, d.text, '', d.icon); var g = 0; var h = d; var k = this; var l = function (j, b) { var c = j.childs; jr.each(c, function (i, e) { var a = e.url || 'javascript:void(0);'; if (e.icon && e.icon != '' && e.icon.indexOf('/') == -1) { e.icon = k.config.iconPath + e.icon } k.add(++g, b, e.text, a, '', e.value, '', e.icon, null, e.open); l(e, g) }) }; l(d, 0); if (f && f instanceof Function) f() }; dTree.prototype.openAll = function () { this.oAll(true) }; dTree.prototype.closeAll = function () { this.oAll(false) }; dTree.prototype.toString = function () { var a = '<div class="ui-tree dtree">\n'; if (document.getElementById) { if (this.config.useCookies) this.selectedNode = this.getSelected(); a += this.addNode(this.root) } else a += 'Browser not supported.'; a += '</div>'; if (!this.selectedFound) this.selectedNode = null; this.completed = true; return a }; dTree.prototype.addNode = function (a) { var b = ''; var n = 0; if (this.config.inOrder) n = a._ai; for (n; n < this.aNodes.length; n++) { if (this.aNodes[n].pid == a.id) { var c = this.aNodes[n]; c._p = a; c._ai = n; this.setCS(c); if (!c.target && this.config.target) c.target = this.config.target; if (c._hc && !c._io && this.config.useCookies) c._io = this.isOpen(c.id); if (!this.config.folderLinks && c._hc) c.url = null; if (this.config.useSelection && c.id == this.selectedNode && !this.selectedFound) { c._is = true; this.selectedNode = n; this.selectedFound = true } b += this.node(c, n); if (c._ls) break } } return b }; dTree.prototype.node = function (a, b) { var c = '<div class="node">' + this.indent(a, b); if (this.config.useIcons) { if (!a.icon) a.icon = (this.root.id == a.pid) ? this.icon.root : ((a._hc) ? this.icon.folder : this.icon.node); if (!a.iconOpen) a.iconOpen = (a._hc) ? this.icon.folderOpen : this.icon.node; if (this.root.id == a.pid) { a.icon = this.icon.root; a.iconOpen = this.icon.root } c += '<img id="i' + this.obj + b + '" src="' + ((a._io) ? a.iconOpen : a.icon) + '" alt="" />' } if (a.url) { c += '<a id="s' + this.obj + b + '" class="' + ((this.config.useSelection) ? ((a._is ? 'nodeSel' : 'node')) : 'node') + '" href="' + a.url + '"'; if (a.title) c += ' title="' + a.title + '"'; if (a.target) c += ' target="' + a.target + '"'; if (this.config.useStatusText) c += ' onmouseover="window.status=\'' + a.name + '\';return true;" onmouseout="window.status=\'\';return true;" '; if (this.config.useSelection && ((a._hc && this.config.folderLinks) || !a._hc)) c += ' onclick="javascript: ' + this.obj + '.s(' + b + ');" node-value="' + a.value + '"'; c += '>' } else if ((!this.config.folderLinks || !a.url) && a._hc && a.pid != this.root.id) c += '<a href="javascript: ' + this.obj + '.o(' + b + ');" class="node" node-value="' + a.value + '">'; c += a.name; if (a.url || ((!this.config.folderLinks || !a.url) && a._hc)) c += '</a>'; c += '</div>'; if (a._hc) { c += '<div id="d' + this.obj + b + '" class="clip" style="display:' + ((this.root.id == a.pid || a._io) ? 'block' : 'none') + ';">'; c += this.addNode(a); c += '</div>' } this.aIndent.pop(); return c }; dTree.prototype.indent = function (a, b) { var c = ''; if (this.root.id != a.pid) { for (var n = 0; n < this.aIndent.length; n++) c += '<img src="' + ((this.aIndent[n] == 1 && this.config.useLines) ? this.icon.line : this.icon.empty) + '" alt="" />'; (a._ls) ? this.aIndent.push(0) : this.aIndent.push(1); if (a._hc) { c += '<a href="javascript: ' + this.obj + '.o(' + b + ');"><img id="j' + this.obj + b + '" src="'; if (!this.config.useLines) c += (a._io) ? this.icon.nlMinus : this.icon.nlPlus; else c += ((a._io) ? ((a._ls && this.config.useLines) ? this.icon.minusBottom : this.icon.minus) : ((a._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus)); c += '" alt="" /></a>' } else c += '<img src="' + ((this.config.useLines) ? ((a._ls) ? this.icon.joinBottom : this.icon.join) : this.icon.empty) + '" alt="" />' } return c }; dTree.prototype.setCS = function (a) { var b; for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n].pid == a.id) a._hc = true; if (this.aNodes[n].pid == a.pid) b = this.aNodes[n].id } if (b == a.id) a._ls = true }; dTree.prototype.getSelected = function () { var a = this.getCookie('cs' + this.obj); return (a) ? a : null }; dTree.prototype.s = function (a) { if (!this.config.useSelection) return; var b = this.aNodes[a]; if (b._hc && !this.config.folderLinks) return; if (this.selectedNode != a) { if (this.selectedNode || this.selectedNode == 0) { var c = document.getElementById("s" + this.obj + this.selectedNode); c.className = "node" } var d = document.getElementById("s" + this.obj + a); d.className = "nodeSel"; this.selectedNode = a; if (this.config.useCookies) this.setCookie('cs' + this.obj, b.id) } }; dTree.prototype.o = function (a) { var b = this.aNodes[a]; this.nodeStatus(!b._io, a, b._ls); b._io = !b._io; if (this.config.closeSameLevel) this.closeLevel(b); if (this.config.useCookies) this.updateCookie() }; dTree.prototype.oAll = function (a) { for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n]._hc && this.aNodes[n].pid != this.root.id) { this.nodeStatus(a, n, this.aNodes[n]._ls); this.aNodes[n]._io = a } } if (this.config.useCookies) this.updateCookie() }; dTree.prototype.openTo = function (a, b, c) { if (!c) { for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n].id == a) { a = n; break } } } var d = this.aNodes[a]; if (d.pid == this.root.id || !d._p) return; d._io = true; d._is = b; if (this.completed && d._hc) this.nodeStatus(true, d._ai, d._ls); if (this.completed && b) this.s(d._ai); else if (b) this._sn = d._ai; this.openTo(d._p._ai, false, true) }; dTree.prototype.closeLevel = function (a) { for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n].pid == a.pid && this.aNodes[n].id != a.id && this.aNodes[n]._hc) { this.nodeStatus(false, n, this.aNodes[n]._ls); this.aNodes[n]._io = false; this.closeAllChildren(this.aNodes[n]) } } }; dTree.prototype.closeAllChildren = function (a) { for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n].pid == a.id && this.aNodes[n]._hc) { if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls); this.aNodes[n]._io = false; this.closeAllChildren(this.aNodes[n]) } } }; dTree.prototype.nodeStatus = function (a, b, c) { var d = document.getElementById('d' + this.obj + b); var e = document.getElementById('j' + this.obj + b); if (this.config.useIcons) { var f = document.getElementById('i' + this.obj + b); f.src = (a) ? this.aNodes[b].iconOpen : this.aNodes[b].icon } e.src = (this.config.useLines) ? ((a) ? ((c) ? this.icon.minusBottom : this.icon.minus) : ((c) ? this.icon.plusBottom : this.icon.plus)) : ((a) ? this.icon.nlMinus : this.icon.nlPlus); d.style.display = (a) ? 'block' : 'none' }; dTree.prototype.clearCookie = function () { var a = new Date(); var b = new Date(a.getTime() - 1000 * 60 * 60 * 24); this.setCookie('co' + this.obj, 'cookieValue', b); this.setCookie('cs' + this.obj, 'cookieValue', b) }; dTree.prototype.setCookie = function (a, b, c, d, e, f) { document.cookie = escape(a) + '=' + escape(b) + (c ? '; expires=' + c.toGMTString() : '') + (d ? '; path=' + d : '') + (e ? '; domain=' + e : '') + (f ? '; secure' : '') }; dTree.prototype.getCookie = function (a) { var b = ''; var c = document.cookie.indexOf(escape(a) + '='); if (c != -1) { var d = c + (escape(a) + '=').length; var e = document.cookie.indexOf(';', d); if (e != -1) b = unescape(document.cookie.substring(d, e)); else b = unescape(document.cookie.substring(d)) } return (b) }; dTree.prototype.updateCookie = function () { var a = ''; for (var n = 0; n < this.aNodes.length; n++) { if (this.aNodes[n]._io && this.aNodes[n].pid != this.root.id) { if (a) a += '.'; a += this.aNodes[n].id } } this.setCookie('co' + this.obj, a) }; dTree.prototype.isOpen = function (a) { var b = this.getCookie('co' + this.obj).split('.'); for (var n = 0; n < b.length; n++) if (b[n] == a) return true; return false }; if (!Array.prototype.push) { Array.prototype.push = function array_push() { for (var i = 0; i < arguments.length; i++) this[this.length] = arguments[i]; return this.length } }; if (!Array.prototype.pop) { Array.prototype.pop = function array_pop() { var a = this[this.length - 1]; this.length = Math.max(this.length - 1, 0); return a } }; jr.extend({ tree: { load: function (d, f, g, h, j) { var k = 'tree_' + Math.ceil(Math.random() * 100); var l = jr.$(d); window[k] = new dTree(k, g); window[k].bind(f, j); l.innerHTML = window[k].toString(); if (h && h instanceof Function) { jr.each(l.getElementsByTagName('A'), function (i, e) { if (e.className == 'node') { jr.event.add(e, 'click', (function (a, b, c) { return function () { h(a, b, c) } })(e, e.getAttribute('node-value'), e.innerHTML.replace(/<[>]+>/, ''))) } }) } return window[k] } } });
jr.extend({ tipbox: { id: 'ui-tipbox', size: { x: 0, y: 0, bx: 0, by: 0 }, show: function (a, b, c, d, e) { var f = document.getElementById(this.id); if (f) { document.body.removeChild(f) } e = e || 1; f = document.createElement('DIV'); f.setAttribute('id', this.id); f.className = this.id; f.style.cssText += 'position:fixed;width:auto;overflow:hidden;'; f.innerHTML = '<div class="ui-tipbox-container">' + a + '</div>'; document.body.appendChild(f); this.size.x = f.offsetWidth; this.size.y = f.offsetHeight; this.size.bx = document.documentElement.clientWidth; this.size.by = document.documentElement.clientHeight; f.getElementsByTagName("DIV")[0].style.width = this.size.x + 'px'; f.style.width = '1px'; f.style.height = '1px'; var g = 1, _y = 1, _opa = 0, _px = (this.size.x > this.size.y ? this.size.x : this.size.y) / 20 / 2; var h = this.size; var i = setInterval(function () { ++_px; if (g + _px > h.x) { g = h.x } else { g += _px } if (_y + _px > h.y) { _y = h.y } else { _y += _px } f.style.width = g + 'px'; f.style.height = _y + 'px'; f.style.left = ((h.bx - g) / 2) + 'px'; f.style.top = ((h.by - _y) / 2 - b) + 'px'; _opa += 5; if (f.style.filter) { f.style.filter = 'filter:alpha(opacity=' + _opa + ')' } else { f.style.opacity = _opa / 100 } if (f == null || (g == h.x && _y == h.y && _opa >= e * 100)) { clearInterval(i) } }, 10); if (c > 0) { var j = (function (t) { return function () { t.close() } })(this); setTimeout(j, c) } }, close: function (a) { var b = document.getElementById(this.id); var c = 100; var d = a != 'left'; var e = d ? b.offsetTop : b.offsetLeft; var f = -(d ? this.size.y : this.size.x) - 20; var g = e / 40; var h = setInterval(function () { ++g; e -= g; if (b == null || e < f) { if (b) { try { document.body.removeChild(b) } catch (exc) { } } clearInterval(h) } else { if (d) { b.style.top = e + 'px' } else { b.style.left = e + 'px' } c -= 5; if (b.style.filter) { b.style.filter = 'filter:alpha(opacity=' + c + ')' } else { b.style.opacity = c / 100 } } }, 10) } } }); jr.extend({ toPager: function (c, d) { this.size = d; this.pageIndex = 1; this.pages = 0; this.pager = null; this.list = null; var e = document.getElementById(c); this.list = e.getElementsByClassName ? document.getElementsByClassName('list', e) : e.getElementsByClassName('list'); this.pages = parseInt(this.list.length / this.size); if (this.list.length % this.size != 0) this.pages++; if (this.pager == null) { var f = e.getElementsByClassName ? document.getElementsByClassName('pager', e) : e.getElementsByClassName('pager'); if (f.length == 0) { var g = document.createElement('DIV'); g.className = 'pager'; e.appendChild(g); this.pager = g } else { this.pager = f[0] } } var t = this; var h; this.showPage = function (b) { t.pageIndex = b; for (var i = 0; i < t.list.length; i++) { t.list[i].style.display = i >= (t.pageIndex - 1) * t.size && i < t.pageIndex * t.size ? 'block' : 'none' } t.pager.innerHTML = '页码:'; for (var j = 0; j < t.pages; j++) { t.pager.innerHTML += '&nbsp;' + (t.pageIndex == j + 1 ? j + 1 : '<a href="javascript:;" page="' + (j + 1) + '">' + (j + 1) + '</a>') } h = t.pager.getElementsByTagName('A'); for (var k = 0; k < h.length; k++) { h[k].onclick = (function (a) { return function () { t.showPage(a) } })(h[k].getAttribute('page')) } }; this.showPage(1) } }); jr.extend({ contextmenu: { ele: null, currEle: null, inst: null, offset: 5, srcs: null, show: function () { this.ele.style.display = 'block' }, close: function () { this.ele.style.display = 'none' }, bind: function (e, k, l, m) { var j = j6; m = m || 'mouseup'; if (!this.ele) { this.srcs = new Array(); this.ele = document.createElement('DIV'); this.ele.className = 'ui-contextmenu'; this.ele.style.cssText = 'position:absolute;'; document.body.appendChild(this.ele); this.srcs.push(this.ele); j.event.add(document.body, 'click', (function (e) { return function () { e.close.apply(e) } }(this))); this.ele.oncontextmenu = function () { return false }; document.oncontextmenu = (function (d, f, e) { return function (a) { var b = j.event.src(a); var c = b; while (c) { for (var i = 0; i < f.length; i++) { if (f[i] === c) { return false } } c = c.parentNode } return true } }(this.ele, this.srcs, e)) } this.srcs.push(e); j.event.add(e, m, (function (h) { return function (a) { var b = a ? a : window.event; if (b.button != 2) { return false } if (h.currEle == null || h.currEle != e) { h.ele.innerHTML = k; if (l) { l(h.ele) } } h.show(); var c = h.ele; var d = Math.max(document.documentElement.scrollTop, document.body.scrollTop), domLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft), eventX = b.clientX, eventY = b.clientY, menuWidth = c.offsetWidth, menuHeight = c.offsetHeight; var f = Math.max(document.documentElement.clientWidth, document.body.clientWidth) - eventX; var g = Math.max(document.documentElement.clientHeight, document.body.clientHeight) - eventY; if (f < menuWidth) { c.style.left = (domLeft + eventX - menuWidth) + 'px' } else { c.style.left = (domLeft + eventX) + 'px' } if (g < menuHeight) { c.style.top = (d + eventY - menuHeight) + 'px' } else { c.style.top = (d + eventY) + 'px' } j.event.stopBubble(b) } })(this)) } } });
function fileUpload(h) { this.id = h.id; this.infopanel = h.info ? document.getElementById(h.info) : null; this.processID = Math.random() * 100 + 100; this.debug = h.debug || false; this.uploadurl = h.url, this.processurl = h.processurl, this.fileName = null; this.file = null; this.repeatSelect = h.repeatSelect == undefined ? false : h.repeatSelect; this.btnText = ''; this.btnClicked = false; var i = document.getElementById(this.id); this.btnText = i.innerHTML || '选择文件'; i.innerHTML = ''; var j, __html_form, __html_up_btn, __html_process, __html_msg_panel; try { j = document.createElement('<IFRAME name="' + (this.id + '_iframe') + '">') } catch (ex) { j = document.createElement('IFRAME'); j.setAttribute('name', this.id + '_iframe') } i.appendChild(j); if (!this.debug) { j.style.display = 'none' } var k = (function (t, g) { return function () { var a = g.contentWindow.document; var b = ''; try { var c = a.getElementsByTagName('HEAD'); if (c.length != 0) { b = c[0].innerHTML } } catch (exc) { t.onUploadComplete.apply(t, [false, exc]); t.clear(); return } if (b) { var d = /<title>(.+?)<\/title>/.exec(b); if (d) { d = d[1]; t.onUploadComplete.apply(t, [false, d, a]); t.clear(); return } } var e = a.body.innerHTML; var f = e; if (e == '') return; e = /{[\s\S]*}/igm.exec(e); if (e) { f = jr.toJson(e) } t.onUploadComplete.apply(t, [true, f, a]); t.clear() } })(this, j); jr.event.add(j, 'load', k); __html_form = document.createElement('FORM'); __html_form.setAttribute('id', this.id + '_form'); __html_form.method = 'POST'; __html_form.style.cssText = 'display:inline'; __html_form.className = 'ui-uploadform'; __html_form.action = this.uploadurl; __html_form.enctype = 'multipart/form-data'; __html_form.encoding = 'multipart/form-data'; __html_form.target = j.getAttribute('name'); i.appendChild(__html_form); __html_up_btn = document.createElement("span"); __html_up_btn.className = 'upbtn'; __html_up_btn.innerHTML = this.btnText; __html_form.appendChild(__html_up_btn); this.file = document.createElement('INPUT'); this.file.setAttribute('type', 'file'); this.file.setAttribute('name', this.id); this.file.setAttribute('tabindex', '9999'); var l = __html_up_btn.offsetTop; var m = this.debug ? 50 : 0; this.file.style.cssText = 'opacity:' + (m / 100) + ';filter:alpha(opacity=' + m + ');cursor:normal;position:absolute;top:' + __html_up_btn.offsetTop + 'px;left:' + __html_up_btn.offsetLeft + 'px;z-index:101;width:' + __html_up_btn.offsetWidth + 'px;height:' + __html_up_btn.offsetHeight + 'px;'; __html_form.appendChild(this.file); __html_process = document.createElement('INPUT'); __html_process.setAttribute('name', 'upload_process'); __html_process.setAttribute('type', 'hidden'); __html_process.setAttribute('value', this.id + '|' + this.processID); __html_form.appendChild(__html_process); this.fileName = this.file.value; setInterval((function (t) { return function () { if (t.file.value != '' && t.fileName != t.file.value) { t.fileName = t.file.value; t.onFileChanged(t.file) } } })(this), 100) } fileUpload.prototype.printf = function (a) { if (this.infopanel) this.infopanel.innerHTML = a }; fileUpload.prototype.clear = function () { if (this.repeatSelect && this.file) { this.file.outerHTML = this.file.outerHTML } }; fileUpload.prototype.checkFileTypes = function (a) { var b = this.file.value; var c = b.substring(b.lastIndexOf('.')); return new RegExp('\\*' + c + ';*', 'i').test(a) }; fileUpload.prototype.onFileChanged = function (a) { }; fileUpload.prototype.onUploading = function (a) { }; fileUpload.prototype.onUploadComplete = function (a, b, c) { }; fileUpload.prototype.upload = function () { var a = document.forms[this.id + '_form']; if (a) { a.submit(); if (this.onUploading) this.onUploading() } }; function fileUploadObject(d, f) { var g = new fileUpload(d); var h = document.getElementById(g.id).getElementsByTagName('SPAN')[0]; g.onUploading = function (a) { g.file.setAttribute('disabled', 'disabled'); try { var b = '上传中...'; var c = jr.dom.getsByClass(h, 'button-txt'); if (c) { jr.each(c, function (i, e) { e.innerHTML = b }) } else { h.innerHTML = b } } catch (ex) { } }; g.onUploadComplete = function (a, b, c) { g.file.removeAttribute('disabled'); try { h.innerHTML = g.btnText } catch (ex) { } if (f) { f.call(g, a, b, c) } }; g.onFileChanged = function (a) { if (d.exts && !g.checkFileTypes(d.exts)) { alert('文件类型不允许上传,仅允许上传文件类型为：' + d.exts) } else { g.upload() } }; return g } jr.extend({ upload: function (a, b) { return fileUploadObject(a, b) } });
jr.extend({ validator: { setTip: function (e, a, b, c) { if (b) { var d = e.getAttribute('summary'); if (d) { d = jr.toJson(d); if (d[b]) { c = d[b] } } } if (e.getAttribute('tipin')) { var f = document.getElementById(e.getAttribute('tipin')); if (f) { if (f.className.indexOf('validator') == -1) { f.className += ' validator' } f.innerHTML = '<span class="' + (a ? 'valid-right' : 'valid-error') + '"><span class="msg">' + c + '</span></span>'; return false } } var g = e.getAttribute('validate_id'); var h = document.getElementById(g); if (!h) { h = document.createElement('DIV'); h.id = g; h.className = 'validator'; var i = jr.getPosition(e); h.style.cssText = 'position:fixed;left:' + (i.right + document.documentElement.scrollLeft) + 'px;top:' + (i.top + document.documentElement.scrollTop) + 'px'; document.body.appendChild(h) } h.innerHTML = '<span class="' + (a ? 'valid-right' : 'valid-error') + '"><span class="msg">' + c + '</span></span>' }, removeTip: function (e) { if (e.getAttribute('tipin')) { var a = document.getElementById(e.getAttribute('tipin')); if (a) { a.innerHTML = ''; return false } } var b = document.getElementById(e.getAttribute('validate_id')); if (b) { document.body.removeChild(b) } }, result: function (a) { if (a) { var b = true; var c = document.getElementById(a); jr.each(jr.dom.getsByClass(c, 'ui-validate'), function (i, e) { if (b) { if (e.getAttribute('tipin')) { if (jr.$(e.getAttribute('tipin')).innerHTML.indexOf('valid-error') != -1) { b = false } } else { e = document.getElementById(e.getAttribute('validate_id')); if (jr.dom.getsByClass(e, 'valid-error').length != 0) { b = false } } } }); return b } else { return jr.dom.getsByClass(document, 'valid-error').length == 0 } }, init: function () { var f = jr; if (!f) { alert('未引用核心库!'); return false } var g = document.getElementsByClassName('ui-validate'); var h; for (var i = 0; i < g.length; i++) { h = g[i].getAttribute('validate_id'); while (h == null) { h = g[i].id; if (h && h != '') { h = 'validate_item_' + h } else { h = 'validate_item_' + parseInt(Math.random() * 1000).toString() } if (document.getElementById(h) != null) { h = null } else { g[i].setAttribute('validate_id', h) } } var j = new Array(); if (g[i].onblur) { j[j.length] = g[i].onblur } if (g[i].getAttribute('isnumber') == 'true') { g[i].style.cssText += 'ime-mode:disabled'; var k = (function (a, e) { return function () { if (/\D/.test(e.value)) { e.value = e.value.replace(/\D/g, '') } e.value = e.value.replace(/^0([0-9])/, '$1') } })(this, g[i]); jr.event.add(g[i], 'keyup', k); jr.event.add(g[i], 'change', k) } if (g[i].getAttribute('isfloat') == 'true') { g[i].style.cssText += 'ime-mode:disabled'; var k = (function (a, e) { return function () { if (/[^\d\.]/.test(e.value)) { e.value = e.value.replace(/[^\d\.]/g, '') } e.value = e.value.replace(/^(0|\.)([0-9]+\.*[0-9]*)/, '$2') } })(this, g[i]); jr.event.add(g[i], 'keyup', k); jr.event.add(g[i], 'change', k) } if (g[i].getAttribute('regex')) { var k = (function (b, e) { return function () { var a = new RegExp(); a.compile(e.getAttribute('regex')); if (!a.test(e.value)) { b.setTip(e, false, 'regex', '输入不正确') } else { b.removeTip(e) } } })(this, g[i]); j[j.length] = k } else { if (g[i].getAttribute('isrequired') == 'true' || g[i].getAttribute('required') == 'true') { var k = (function (a, e) { return function () { if (e.value.replace(/\s/g, '') == '') { a.setTip(e, false, 'required', '该项不能为空') } else { a.removeTip(e) } } })(this, g[i]); j[j.length] = k } if (g[i].getAttribute('length')) { var k = (function (d, e) { return function () { var a = e.getAttribute('length'); var b = /\[(\d*),(\d*)\]/ig; var c = parseInt(a.replace(b, '$1')), l_e = parseInt(a.replace(b, '$2')); if (e.value.length < c) { d.setTip(e, false, 'length', l_e ? '长度必须为' + c + '-' + l_e + '位' : '长度至少' + (c) + '位') } else if (e.value.length > l_e) { d.setTip(e, false, 'length', c ? '长度必须为' + c + '-' + l_e + '位' : '长度超出' + (l_e) + '位') } else if (e.getAttribute('required') == null || e.value.length > 0) { d.removeTip(e) } } })(this, g[i]); j[j.length] = k } } var l = (function (a) { return function () { for (var i = 0; i < a.length; i++) { if (a[i]) { a[i].apply(this, arguments) } } } })(j); g[i].onblur = l } }, validate: function (a) { var b; if (a) { b = jr.dom.getsByClass(document.getElementById(a), 'ui-validate') } else { b = jr.dom.getsByClass(document, 'ui-validate') } var c = function (e) { return e.getAttribute('required') == "true" || e.getAttribute('isrequired') == "true" || e.getAttribute('length') || e.getAttribute('regex') }; for (var i = 0; i < b.length; i++) { if (c(b[i])) { if (b[i].onblur) { b[i].onblur() } } } return this.result(a) } } }); jr.event.add(window, 'load', function () { jr.validator.init() });
function autoCompletion(v, w, x, y, z, A) { var B; var C; this.charMinLen = A || 1; this.lastChar = ''; this.isOnFocus = false; this.timer = null; this.url = w; if (!v.nodeName) { v = jr.$(v) } var D = function () { B = v.previousNode; if (!B || B.nodeName != 'DIV' || B.className != 'ui-autocompletion-panel') { if (v.parentNode.offsetLeft > v.offsetLeft) { v.parentNode.style.cssText += 'position:relative' } B = document.createElement('DIV'); B.className = 'ui-autocompletion-panel'; B.style.cssText = 'curcor:default;z-index:102;position:absolute;left:' + v.offsetLeft + 'px;top:' + (v.offsetTop + v.offsetHeight) + 'px;width:' + v.offsetWidth + 'px;overflow:hidden;display:none'; v.parentNode.insertBefore(B, v); C = document.createElement('DIV'); C.className = 'inner'; C.style.cssText = 'background-color:#fff;'; B.appendChild(C) } else { C = B.getElementsByTagName('DIV')[0] } }; D(); var E = (function (e, p, q, r, s, u, t) { return function (l, m) { if (m) t.isOnFocus = true; var n = window.event || l; if (n.altKey || n.keyCode == 17) return; var o = e.value; if (/^\s*$/.test(o) && t.charMinLen != 0) return; o = o.replace(/^(\s*)(.+?)(\s*)$/, '$2'); if (o.length < t.charMinLen) return; if (t.lastChar != '' && t.lastChar == o) { return } else { t.lastChar = o } jr.xhr.request({ uri: t.url + (t.url.indexOf('?') == -1 ? "?" : '&') + 'key=' + encodeURIComponent(o), params: {}, method: 'GET', data: 'json' }, { success: function (d) { if (r) r(d); if (d.length != 0) { p.style.display = ''; var f = new RegExp(o, 'i'); var g = '<b>' + o + '</b>'; var h = '<ul style="margin:0;padding:0;">'; for (var i = 0; i < d.length; i++) { h += '<li' + (i == 0 ? ' class="first"' : '') + (d[i].title ? ' title="' + d[i].title + '"' : '') + '>' + d[i].text.replace(f, g) + '</li>'; if (d[i].text == o && s) { if (e.onblur) e.onblur(); s(d[i]) } } h += '</ul>'; q.innerHTML = h; var k = q.getElementsByTagName('LI'); jr.each(k, function (i, c) { c.onmouseover = (function (a, b) { return function () { for (var j = 0; j < b.length; j++) { b[j].className = j == 0 ? 'first' : '' } this.className = this == k[0] ? 'first selected' : 'selected' } })(p, k); c.onclick = (function (j, a) { return function () { e.value = j.text; a.style.display = 'none'; if (e.onblur) e.onblur(); if (s) s(j) } })(d[i], p) }) } else { p.style.display = 'none' } setTimeout(function () { t.isOnFocus = false }, 500) }, error: function () { if (u && u instanceof Function) u() } }) } })(v, B, C, x, y, z, this); var F = (function (p, t) { return function (a) { if (!t.isOnFocus) { p.style.display = 'none' } } })(B, this); jr.event.add(v, 'focus', (function (t) { return function (a) { E(a, true) } })(this)); jr.event.add(v, 'keyup', E); jr.event.add(document, 'click', F); return this } jr.extend({ autoCompletion: function (a, b, c, d, e, f) { return new autoCompletion(a, b, c, d, e, f) } });
jr.extend({ animation: { timer: function (a, b, c, d, e) { if (!a) return; var f = c != null ? c : 0; var g = d != null ? d : 100; var h = 0; var i = 0; if (e < 1 || e > 5) { h = (d - c) < 0 ? -e : e; i = 20 } else { h = (g - f) / (4 * (6 - e)); h *= (Math.abs(g - f) / 100); i = 1000 / h; i = i < 0 ? -Math.ceil(i) : Math.floor(i); if (i < 30) i = 30 } var t = setInterval(function () { f = f + h; if (Math.abs(f) >= Math.abs(g)) { f = g; if (b instanceof Function) b(); clearInterval(t) } a(f, h) }, i) }, opacity: function (e, d, f, g) { var h = jr.$(e); var s = jr.style(h); var i = s["opacity"]; if (i == undefined) { if (h.filters.alpha) { i = h.filters.alpha.opacity / 100 } else { i = 0 } } this.timer((function (e) { return function (t, a) { var b = a < 0; var c = b ? (100 + t) / 100 : t / 100; e.style.opacity = c; e.style.filter = 'alpha(opacity=' + (c * 100) + ')'; if (t == -100 && b) { e.style.display = 'none' } else if (!b && t == a) { e.style.display = '' } } })(h), d, parseInt(i), f, g) }, fade: function (e, a, b) { var c = b != null ? b : 3; var d = -100; this.opacity(e, a, d, c) }, show: function (e, a, b) { var c = b != null ? b : 3; var d = 100; this.opacity(e, a, d, c) }, toggle: function (e, a, b) { this._toggle(e, 'wh', a, b) }, toggleWidth: function (e, a, b) { this._toggle(e, 'w', a, b) }, toggleHeight: function (e, a, b) { this._toggle(e, 'h', a, b) }, _toggle: function (e, a, b, c) { e = jr.$(e); var d = jr.style(e); var w = e.offsetWidth; var h = e.offsetHeight; var f = parseInt(e.getAttribute("toggle-w") || 0); var g = parseInt(e.getAttribute("toggle-h") || 0); if (f == 0 || g == 0) { if (w == 0 || h == 0) { w = f = jr.clientWidth(e); h = g = jr.clientHeight(e) } e.setAttribute('toggle-w', w); e.setAttribute('toggle-h', h) } var i = c == null ? 2 : c; var j = i * (g / f); if (d["display"] == 'none') { var k = { overflow: 'hidden', display: 'inherit' }; if (a.indexOf('w') != -1) { k.width = '0px' } if (a.indexOf('h') != -1) { k.height = '0px' } jr.style(e, k); this._toggleShow(e, a, b, w, f, h, g, i, j) } else { e.style.overflow = 'hidden'; this._toggleClose(e, a, b, w, f, h, g, i, j) } }, _toggleShow: function (e, b, c, w, d, h, f, g, i) { if (b.indexOf('w') != -1) { this.timer((function (e, w) { return function (t, a) { e.style.width = (a > 0 ? t : (w + t)) + 'px' } })(e, w), c, 0, d, g) } if (b.indexOf('h') != -1) { this.timer((function (e, h) { return function (t, a) { e.style.height = (a > 0 ? t : (h + t)) + 'px' } })(e, h), c, 0, f, i) } }, _toggleClose: function (e, c, d, w, f, h, f, g, i) { if (c.indexOf('w') != -1) { this.timer((function (e, w) { return function (t, a) { var b = (a > 0 ? t : (w + t)); if (b < 0) b = 0; e.style.width = b + 'px'; if (b == 0) { e.style.display = 'none' } } })(e, w), d, 0, -w, g) } if (c.indexOf('h') != -1) { this.timer((function (e, h) { return function (t, a) { var b = a > 0 ? t : h + t; if (b < 0) b = 0; e.style.height = b + 'px'; if (b == 0) { e.style.display = 'none' } } })(e, h), d, 0, -h, i) } } } });
jr.event.add(window, 'load', function () { jr.each(document.getElementsByClassName('ui-exchange'), function (i, e) { var v = null; var d = null; var f = null; var g = 'exchange'; switch (e.nodeName) { case 'IMG': f = 'src'; break; default: f = 'innerHTML'; break } if (f == null) return; v = e[f]; d = e.getAttribute(g); if (d) { jr.event.add(e, 'mouseover', (function (a, b, c) { return function () { a[b] = c } })(e, f, d)); jr.event.add(e, 'mouseout', (function (a, b, c) { return function () { a[b] = c } })(e, f, v)) } }) });


function getWin(){
    var win = window;
    while(win.parent!=win){
        win = win.parent;
    }
    return win;
}

/***  AJAX ***/
function showMsg(msg, callback, second,notMask) {
    var win = getWin();
    if (!win.xhrCt) {
        win.xhrCt = document.createElement("DIV");
        win.xhrCt.className = 'xhr-container hidden';
        win.xhrCt.innerHTML = jr.template('<div class="gate" style="width:100%;height:{h}px" id="xhr_gate_layout"></div><div class="msg" id="xhr_msg_layout"></div>', {
            h: jr.screen.height()
        });
        win.document.body.appendChild(win.xhrCt);
        win.xhrGate = win.document.getElementById('xhr_gate_layout');
        win.xhrMsg = win.document.getElementById('xhr_msg_layout');
    }

    var mw = msg.replace(/<[^>]+>/ig, '').length * 12 + 10;
    win.xhrMsg.innerHTML = msg;
    win.xhrMsg.style.width = mw + 'px';
    win.xhrGate.className = notMask ? "gate hidden" : 'gate';

    win.xhrCt.className = 'xhr-container';
    if (second) {
        setTimeout(function() {
            closeMsg();
            if (callback && callback instanceof Function)callback();
        }, second);
    }
}

function closeMsg() {
    getWin().xhrCt.className = 'xhr-container hidden';
}

function showErr(msg, second) {
    showMsg('<span class="error">' + msg + '</span>',null,second || 3000,true);
}




